openapi: 3.0.0
info:
  version: 3.0.0
  title: 'Wallet'
  description: 'Money transfer service between users'
servers:
  # Added by API Auto Mocking Plugin
  - description: Варіант 1. Створити сервіс переказу коштів між користувачами, кожен користувач має власний гаманець та можливість переказувати чи отримувати кошти від іншого користувача. 
    url: https://virtserver.swaggerhub.com/bidaky/MyProject/3.0.0

tags:
- name: authentication
  description: Operation about a authentication
- name: user
  description: Operations about user
- name: wallets
  description: Operations about wallets
- name: transactions
  description: Operations about transactions
  
paths:
  /authentication:
   post:
    tags:
    - authentication
    summary: authenticate users
    description: This operation authenticate users
    operationId : auth
    requestBody:
      description: userdata
      content:
           '*/*':
            schema:
              $ref: '#/components/schemas/User'
      required: true
    responses:
        '200':
          description: successful token
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tokens'
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: invalid data
          content: {}
        '404':
          description: user not found
          content: {}
          
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: auth users 
      operationId: createUser
      requestBody:
        description: Create  user 
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          
        '400':
          description: invalid user id
          content: {}
        '404':
          description: user not found
          content: {}
      security:
        - ApiKeyAuth: []
  '/user/{username}':
    get:
      tags:
        - user
      summary: get user by username
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: the name we are looking for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid user id
          content: {}
        '404':
          description: user not found
          content: {}
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - user
      summary: update user
      description: auth users 
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: update user
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          
        '400':
          description: invalid user id
          content: {}
        '404':
          description: user not found
          content: {}
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - user
      summary: delete user
      description: auth users 
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description:  name that we need to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid user id
          content: {}
        '404':
          description: user not found
          content: {}   
      security:
        - ApiKeyAuth: []
  /wallets:
    post:
      tags:
      - wallets
      summary: create wallet
      description: auth users 
      operationId: addnewWallet
      requestBody:
        description: create wallet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Wallets'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid wallet id
          content: {}
        '404':
          description: wallet not found
          content: {}   
      security:
        - ApiKeyAuth: []
      
  '/wallets/{walletId}':
    get:
      tags:
        - wallets
      summary:  wallet by walletId
      operationId: getWalletbyId
      parameters:
        - name: walletId
          in: path
          description: wallet which we are looking for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Wallets'
            application/json:
              schema:
                $ref: '#/components/schemas/Wallets'
        '400':
          description: invalid wallet id
          content: {}
        '404':
          description: wallet not found
          content: {}
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - wallets
      summary: update wallet
      description: auth users 
      operationId: updateWallet
      parameters:
        - name: walletId
          in: path
          description: walletId that we want to  update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: update
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid wallet id
          content: {}
        '404':
          description: wallet not found
          content: {}
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - wallets
      summary: Delete wallet
      description: auth user
      operationId: deleteWallet
      parameters:
        - name: walletId
          in: path
          description: walletId  that we want to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success 
          content: {}
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}   
      security:
        - ApiKeyAuth: []    
  '/wallets/{wallet_id}/transactions':
    post:
      tags:
        - transactions
      summary: send money
      operationId: sendMoney
      parameters:
        - name: wallet_id
          in: path
          description: ID of wallet which send
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Transactions'
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Transaction not found
          content: {}
      security:
        - ApiKeyAuth: []
    get:
      tags:
        - transactions
      summary: Get transaction
      description: Get transaction information
      parameters:
        - name: wallet_id
          in: path
          description: ID of wallet which send
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description:  successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        '400':
          description: invalid id 
        '404':
          description: id not found
      security:
        - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    Wallets:
      type: object
      properties:
        wallet_id:
          type: integer
          format: int64
        sumofmoney:
          type: number 
          format: double
      xml:
        name: Wallets
        
    Transactions:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wallet_id:
          type: integer
          format: int64
        sum:
          type: number
          format: double
        TransactionDate:
          type: string
          format: date-time
        complete:
          type: boolean
          default: false
      xml:
        name: Transactions
    Tokens:
      type: object
      properties:
        tokens:
         type: string
      xml:
        name: Tokens